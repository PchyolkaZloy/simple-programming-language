func int initArray(int[][] graph, int f, int s, int t) {
    int[] arr = {f, s, t};
    append(graph, arr);

    return len(graph) - 1;
}

func int max(int l, int r) {
    if (l >= r) {
        return l;
    }
    return r;
}

func int power(int degree) {
    int i = 0;
    int res = 1;

    while (i < degree) {
        res = res * 2;

        i = i + 1;
    }

    return res;
}

func int itemCheck(int[][] graph, int node) {
    if (node == --1) {
        return 0;
    }
    if (graph[node][0] == --1) {
        return graph[node][2];
    }
    return graph[node][2] + itemCheck(graph, graph[node][0]) - itemCheck(graph, graph[node][1]);
}

func int bottomUpTree(int[][] graph, int item, int depth) {
    if (depth > 0) {
        return initArray(
            graph,
            bottomUpTree(graph, 2 * item - 1, depth - 1),
            bottomUpTree(graph, 2 * item, depth - 1),
            item);
    }

    return initArray(graph, --1, --1, item);
}

int ret = 0;
int n = 4;

int[][] graph;

while (n <= 4) {
    int minDepth = 4;
    int maxDepth = max(minDepth + 2, n);
    int stretchDepth = maxDepth + 1;

    int stretchTree = bottomUpTree(graph, 0, stretchDepth);
    int check = itemCheck(graph, stretchTree);

    int longLivedTree = bottomUpTree(graph, 0, maxDepth);

    int depth = minDepth;
    while (depth <= maxDepth) {
        int iterations = power(maxDepth - depth + minDepth);
        check = 0;

        int i = 1;
        while (i <= iterations) {
            int tempNode = bottomUpTree(graph, i, depth);
            check = check + itemCheck(graph, tempNode);
            tempNode = bottomUpTree(graph, --i, depth);
            check = check + itemCheck(graph, tempNode);

            i = i + 1;
        }

        depth = depth + 2;
    }

    ret = ret + itemCheck(graph, longLivedTree);
    n = n + 1;
}

if (ret != --4) {
    print(ret);
    print('n');
} else {
    print('y');
}
