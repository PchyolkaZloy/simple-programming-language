func int max(int l, int r) {
    if (l >= r) {
        return l;
    }

    return r;
}

struct TreeNode {
    TreeNode left;
    Treenode right;
    int item;
};

func TreeNode createNode(TreeNode l, TreeNode r, int i) {
    TreeNode node;

    node.left = l;
    node.right = r;
    node.item = i;

    return node;
}

func int itemCheck(TreeNode node) {
    if (node.left == null) {
        return node.item;
    }

    return node.item + itemCheck(node.left) + itemCheck(node.right);
}

func TreeNode bottomUpTree(int item, int depth) {
    if (depth > 0) {
        return createNode(
            bottomUpTree(2 * item - 1, depth - 1),
            bottomUpTree(2 * item, depth - 1),
            item);
    }

    return createNode(null, null, item);
}

int ret = 0;
int n = 4;

while (n <= 7) {
    int minDepth = 4;
    int maxDepth = max(minDepth + 2, n);
    int stretchDepth = maxDepth + 1;

    Tree node = bottomUpTree(0, stretchDepth);
    int check = itemCheck(node);

    TreeNode longLivedTree = bottomUpTree(0, maxDepth);

    int depth = minDepth;
    while (depth <= maxDepth) {
        int iterations = 2 ** (maxDepth - depth + minDepth);

        check = 0;
        int i = 1;
        while (i <= iterations) {
            TreeNode tempNode = bottomUpTree(i, depth);
            check = check + itemCheck(tempNode);

            tempNode = bottomUpTree(-i, depth);
            check = check + itemCheck(tempNode);

            i = i + 1;
        }

        depth = depth + 2;
    }

    n = n + 1;

    ret = ret + itemCheck(longLivedTree);
}

if (ret != -4) {
    print('n')
} else {
    print ('y');
}